[{"/workspaces/pmdrtd/src/index.js":"1","/workspaces/pmdrtd/src/App.js":"2","/workspaces/pmdrtd/src/pages/home/Home.jsx":"3","/workspaces/pmdrtd/src/components/sidebar/Sidebar.jsx":"4","/workspaces/pmdrtd/src/components/main/Main.jsx":"5","/workspaces/pmdrtd/src/pages/landingpage/LandingPage.jsx":"6","/workspaces/pmdrtd/src/pages/login/Login.jsx":"7","/workspaces/pmdrtd/src/components/todolist/TodoList.jsx":"8"},{"size":233,"mtime":1683668018407,"results":"9","hashOfConfig":"10"},{"size":649,"mtime":1685989995637,"results":"11","hashOfConfig":"10"},{"size":326,"mtime":1685355687057,"results":"12","hashOfConfig":"10"},{"size":421,"mtime":1684110838502,"results":"13","hashOfConfig":"10"},{"size":5555,"mtime":1686094247410,"results":"14","hashOfConfig":"10"},{"size":5854,"mtime":1684141655279,"results":"15","hashOfConfig":"10"},{"size":5504,"mtime":1685991247533,"results":"16","hashOfConfig":"10"},{"size":853,"mtime":1686092002762,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1ql542g",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspaces/pmdrtd/src/index.js",[],[],[],"/workspaces/pmdrtd/src/App.js",[],[],"/workspaces/pmdrtd/src/pages/home/Home.jsx",[],[],"/workspaces/pmdrtd/src/components/sidebar/Sidebar.jsx",[],[],"/workspaces/pmdrtd/src/components/main/Main.jsx",[],[],"/workspaces/pmdrtd/src/pages/landingpage/LandingPage.jsx",[],[],"/workspaces/pmdrtd/src/pages/login/Login.jsx",["44","45"],[],"import React, { useState } from 'react';\nimport LoginStyle from './Login.module.css';\n// import { Link } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [url, setUrl] = useState('');\n  const [showRegistration, setShowRegistration] = useState(false); // State to toggle between login and registration forms\n  const [username, setUserName] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  \n  const baseUrl = 'http://127.0.0.1:5000';\n\n\n  const handleLogin = (event) => {\n    event.preventDefault();\n\n    setUrl(baseUrl+'/api/user/login');\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    })\n      .then((response) => {\n        // console.log(response.body);\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Login failed');\n        }\n      }).then((data)=>{\n        // Redirect to the dashboard page if login is successful\n        toast.success('Login successful!');\n\n        console.log(data);\n        window.location.href = 'pomodoropal/build/dashboard';\n      }).catch((error) => {\n        console.error(error);\n        // Display an error message to the user\n        // alert('Login failed. Please try again.');\n        toast.error('Login failed. Please try again.');\n\n      });\n  };\n\n  const handleToggleForm = () => {\n    setShowRegistration(!showRegistration);\n  };\n\n  const handleRegister = (event) => {\n    event.preventDefault();\n\n    fetch(baseUrl+'/api/user/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, email, password, confirmPassword }),\n    }).then((response) => {\n        if (response.ok) {\n           return response.json();\n\n        } else {\n          throw new Error('Login failed');\n        }\n    }).then((data)=>{\n        // console.log(data.message);\n        toast.success('Registration successful!');\n\n        //Redirect to the dashboard page if login is successful\n        //window.location.href = 'pomodoropal/build/dashboard';\n        handleToggleForm();\n    }).catch((error) => {\n        console.error(error);\n        // Display an error message to the user\n        toast.error('Registration failed. Please try again.');\n        // alert('Register failed. Please try again.');\n    });\n  }\n\n\n  return (\n    <div className={LoginStyle.container}>\n      <div className={LoginStyle.formContainer}>\n        <ToastContainer />\n        <form className={`${LoginStyle.loginForm} ${showRegistration ? LoginStyle.hidden : ''}`} onSubmit={handleLogin}>\n          <h1 className={LoginStyle.h1}>Login</h1>\n          <label className={LoginStyle.label} htmlFor=\"email\">Email:</label>\n          <input className={LoginStyle.input}\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n            required\n          />\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            className={LoginStyle.input}\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n            required\n          />\n          <button className={LoginStyle.button} type=\"submit\">Login</button>\n          <p className={LoginStyle.p}>\n            Don't have an account? <a onClick={handleToggleForm} className={LoginStyle.a} >Register here</a>.\n          </p>\n        </form>\n\n        <form className={`${LoginStyle.registrationForm} ${showRegistration ? '' : LoginStyle.hidden}`} onSubmit={handleRegister}>\n\n          <h1 className={LoginStyle.h1}>Register</h1>\n\n          <label className={LoginStyle.label} htmlFor=\"name\">Name:</label>\n          <input \n            className={LoginStyle.input}\n            type=\"test\" \n            id=\"username\" \n            name=\"username\" \n            value={username}\n            onChange={(event) => setUserName(event.target.value)} \n            required\n           />\n\n          <label className={LoginStyle.label} htmlFor=\"email\">Email:</label>\n          <input className={LoginStyle.input} type=\"email\" id=\"email\" name=\"email\" value={email}\n            onChange={(event) => setEmail(event.target.value)} required />\n\n          <label className={LoginStyle.label} htmlFor=\"password\">Password:</label>\n          <input className={LoginStyle.input} type=\"password\" id=\"password\" name=\"password\"  value={password}\n            onChange={(event) => setPassword(event.target.value)} required />\n\n          <label className={LoginStyle.label} htmlFor=\"confirm-password\">Confirm Password:</label>\n          <input className={LoginStyle.input} type=\"password\" id=\"confirm-password\" value={confirmPassword}\n            onChange={(event) => setConfirmPassword(event.target.value)} name=\"confirm-password\" required />\n\n          <button className={LoginStyle.button}  type=\"submit\">Register</button>\n\n          <p className={LoginStyle.p}>\n            Already have an account? <a onClick={handleToggleForm} className={LoginStyle.a} >Login here</a>.\n          </p>\n\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","/workspaces/pmdrtd/src/components/todolist/TodoList.jsx",[],[],{"ruleId":"46","severity":1,"message":"47","line":115,"column":36,"nodeType":"48","endLine":115,"endColumn":92},{"ruleId":"46","severity":1,"message":"47","line":149,"column":38,"nodeType":"48","endLine":149,"endColumn":94},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]